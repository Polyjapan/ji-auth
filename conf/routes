
# Routes
# This file defines all application routes (Higher priority routes first)
# ~~~~

OPTIONS        /                                                    controllers.OptionsController.rootOptions
OPTIONS        /*url                                                controllers.OptionsController.options(url: String)

# API (legacy)
GET            /api/user/:user                                      controllers.api.AppProfileController.getUserProfile(user: Int)
GET            /api/user/search/:query                              controllers.api.AppProfileController.searchUsers(query: String)
GET            /api/users/$users<[0-9,]+>                           controllers.api.AppProfileController.getUserProfiles(users: String)


# API
GET            /api/v2/apikeys                                      controllers.api.management.ApiKeysController.getApiKeys
+nocsrf
POST           /api/v2/apikeys                                      controllers.api.management.ApiKeysController.createApiKey
GET            /api/v2/apikeys/:id                                  controllers.api.management.ApiKeysController.getApiKey(id: Int)
+nocsrf
PUT            /api/v2/apikeys/:id                                  controllers.api.management.ApiKeysController.updateApiKey(id: Int)
+nocsrf
DELETE         /api/v2/apikeys/:id                                  controllers.api.management.ApiKeysController.deleteApiKey(id: Int)
GET            /api/v2/apikeys/:id/scopes                           controllers.api.management.ApiKeysController.getKeyScopes(id: Int)
+nocsrf
POST           /api/v2/apikeys/:id/scopes                           controllers.api.management.ApiKeysController.addScope(id: Int)
+nocsrf
POST           /api/v2/apikeys/:id/scopes/delete                    controllers.api.management.ApiKeysController.deleteScope(id: Int)

GET            /api/v2/casservices                                  controllers.api.management.CasAppsController.getCasServices
+nocsrf
POST           /api/v2/casservices                                  controllers.api.management.CasAppsController.createCasService
GET            /api/v2/casservices/:id                              controllers.api.management.CasAppsController.getCasService(id: Int)
+nocsrf
DELETE         /api/v2/casservices/:id                              controllers.api.management.CasAppsController.deleteApp(id: Int)
+nocsrf
PUT            /api/v2/casservices/:id                              controllers.api.management.CasAppsController.updateCasService(id: Int)
+nocsrf
POST           /api/v2/casservices/:id/domains                      controllers.api.management.CasAppsController.addDomainToWhitelist(id: Int)
+nocsrf
POST           /api/v2/casservices/:id/domains/delete               controllers.api.management.CasAppsController.removeDomainFromWhitelist(id: Int)
+nocsrf
POST           /api/v2/casservices/:id/allowedGroups                controllers.api.management.CasAppsController.addAllowedGroup(id: Int)
+nocsrf
POST           /api/v2/casservices/:id/allowedGroups/delete         controllers.api.management.CasAppsController.removeAllowedGroup(id: Int)
+nocsrf
POST           /api/v2/casservices/:id/requiredGroups               controllers.api.management.CasAppsController.addRequiredGroup(id: Int)
+nocsrf
POST           /api/v2/casservices/:id/requiredGroups/delete        controllers.api.management.CasAppsController.removeRequiredGroup(id: Int)
+nocsrf
POST           /api/v2/casservices/:id/allowedProxy                 controllers.api.management.CasAppsController.addAllowedService(id: Int)
+nocsrf
POST           /api/v2/casservices/:id/allowedProxy/delete          controllers.api.management.CasAppsController.removeAllowedService(id: Int)


GET            /api/v2/groups                                       controllers.api.management.GroupsController.getGroups
+nocsrf
POST           /api/v2/groups                                       controllers.api.management.GroupsController.createGroup
GET            /api/v2/groups/:name                                 controllers.api.management.GroupsController.getGroup(name: String)
+nocsrf
PUT            /api/v2/groups/:name                                 controllers.api.management.GroupsController.updateGroup(name: String)
+nocsrf
DELETE         /api/v2/groups/:name                                 controllers.api.management.GroupsController.deleteGroup(name: String)
+nocsrf
POST           /api/v2/groups/:name/scopes                          controllers.api.management.GroupsController.addScope(name: String)
+nocsrf
POST           /api/v2/groups/:name/scopes/delete                   controllers.api.management.GroupsController.deleteScope(name: String)
GET            /api/v2/groups/:name/members                         controllers.api.management.GroupsController.getMembers(name: String)
+nocsrf
POST           /api/v2/groups/:name/members                         controllers.api.management.GroupsController.addMember(name: String)
+nocsrf
POST           /api/v2/groups/:name/members/delete                  controllers.api.management.GroupsController.deleteMember(name: String)


GET            /api/v2/users                                        controllers.api.management.UsersController.getUsers
GET            /api/v2/users/$id<[0-9]+>                            controllers.api.management.UsersController.getUser(id: Int)
GET            /api/v2/users/$ids<[0-9,]+>                          controllers.api.management.UsersController.getUsersWithIds(ids)
GET            /api/v2/users/search                                 controllers.api.management.UsersController.searchUsers(q: String)
+nocsrf
PUT            /api/v2/users/:id                                    controllers.api.management.UsersController.updateUser(id: Int)
GET            /api/v2/users/:id/logout                             controllers.api.management.UsersController.forceLogOut(id: Int)
GET            /api/v2/users/:id/confirmEmail                       controllers.api.management.UsersController.forceConfirmEmail(id: Int)
+nocsrf
POST           /api/v2/users/:id/scopes                             controllers.api.management.UsersController.addScope(id: Int)
+nocsrf
POST           /api/v2/users/:id/scopes/delete                      controllers.api.management.UsersController.deleteScope(id: Int)

+nocsrf
POST           /api/token/user                                      controllers.api.ApiTokensController.userToken
+nocsrf
POST           /api/token/app                                       controllers.api.ApiTokensController.appToken

# CAS

GET            /cas/login                                           controllers.cas.CASLoginController.loginGet(service: String, renew: Option[Boolean] ?= None, gateway: Option[Boolean] ?= None)

GET            /cas/v1/validate                                     controllers.cas.CASv1Controller.validate(ticket: String, service: String)
GET            /cas/validate                                        controllers.cas.CASv1Controller.validate(ticket: String, service: String)
GET            /cas/v1/login                                        controllers.cas.CASLoginController.loginGet(service: String, renew: Option[Boolean] ?= None, gateway: Option[Boolean] ?= None)

GET            /cas/v2/logout                                       controllers.forms.LogoutController.logout(app: Option[String], redirect: Option[String] ?= None, service: Option[String] ?= None)
GET            /cas/v1/logout                                       controllers.forms.LogoutController.logout(app: Option[String], redirect: Option[String] ?= None, service: Option[String] ?= None)
GET            /cas/logout                                          controllers.forms.LogoutController.logout(app: Option[String], redirect: Option[String] ?= None, service: Option[String] ?= None)

GET            /cas/v2/proxy                                        controllers.cas.CASv2Controller.proxy(pgt: String, targetService: String, format: Option[String] ?= None)
GET            /cas/proxy                                           controllers.cas.CASv2Controller.proxy(pgt: String, targetService: String, format: Option[String] ?= None)
GET            /cas/v2/serviceValidate                              controllers.cas.CASv2Controller.serviceValidate(ticket: String, service: String, format: Option[String] ?= None, pgtUrl: Option[String] ?= None)
GET            /cas/p3/serviceValidate                              controllers.cas.CASv2Controller.serviceValidate(ticket: String, service: String, format: Option[String] ?= None, pgtUrl: Option[String] ?= None)
GET            /cas/serviceValidate                                 controllers.cas.CASv2Controller.serviceValidate(ticket: String, service: String, format: Option[String] ?= None, pgtUrl: Option[String] ?= None)
GET            /cas/v2/proxyValidate                                controllers.cas.CASv2Controller.proxyValidate(ticket: String, service: String, format: Option[String] ?= None, pgtUrl: Option[String] ?= None)
GET            /cas/p3/proxyValidate                                controllers.cas.CASv2Controller.proxyValidate(ticket: String, service: String, format: Option[String] ?= None, pgtUrl: Option[String] ?= None)
GET            /cas/proxyValidate                                   controllers.cas.CASv2Controller.proxyValidate(ticket: String, service: String, format: Option[String] ?= None, pgtUrl: Option[String] ?= None)
GET            /cas/v2/login                                        controllers.cas.CASLoginController.loginGet(service: String, renew: Option[Boolean] ?= None, gateway: Option[Boolean] ?= None)

# General redirection

GET            /redirect                                            controllers.RedirectController.redirectGet

# UI

GET            /register                                            controllers.forms.RegisterController.registerGet
POST           /register                                            controllers.forms.RegisterController.registerPost

GET            /login                                               controllers.forms.LoginController.loginGet(app: Option[String] ?= None, tokenType: Option[String] ?= None, service: Option[String] ?= None)
POST           /login                                               controllers.forms.LoginController.loginPost

GET            /login/tfa                                           controllers.forms.TFAValidationController.tfaCheckGet
POST           /login/tfa                                           controllers.forms.TFAValidationController.tfaCheckPost
GET            /login/tfa/webauthn/start                            controllers.forms.TFAValidationController.webauthnInit

GET            /tfa/manage                                          controllers.management.TFAManagementController.get
POST           /tfa/manage/delete                                   controllers.management.TFAManagementController.deleteKey

GET            /tfabackups/generate                                 controllers.management.TFAManagementController.generateBackupCodes

GET            /totp/register/start                                 controllers.management.TFAManagementController.totpEnrolStart
POST           /totp/register/complete                              controllers.management.TFAManagementController.totpEnrolFinish

GET            /webauthn/register/start                             controllers.management.TFAManagementController.webauthnGetParam
POST           /webauthn/register/complete                          controllers.management.TFAManagementController.webauthnCompleteRegistration

GET            /update_info                                         controllers.forms.UpdateInfoController.updateGet(required: Option[Boolean] ?= None)
POST           /update_info                                         controllers.forms.UpdateInfoController.updatePost

GET            /forgot_password                                     controllers.forms.PasswordResetController.passwordResetGet
POST           /forgot_password                                     controllers.forms.PasswordResetController.passwordResetPost

GET            /password_reset/:email/:code                         controllers.forms.PasswordResetController.passwordResetChangeGet(email: String, code: String)
POST           /password_reset                                      controllers.forms.PasswordResetController.passwordResetChangePost

GET            /email_confirm/:email/:code                          controllers.forms.EmailConfirmController.emailConfirmGet(email: String, code: String)

GET            /logout                                              controllers.forms.LogoutController.logout(app: Option[String], redirect: Option[String] ?= None, service: Option[String] ?= None)

GET            /assets/*file                                        controllers.Assets.at(file)


# Management web UI

GET            /                                                    controllers.management.ManagementHomeController.home

